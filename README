#Pasos para crear el proyecto

=======
; chinin estuvo aquí  
; nuevamente  

modifique github jisan
otra vez
'''

#structura del proyecto
Crear: entorno virtual - activar el entorno

crea las carpetas:
----Proyecto            # nombre de la carpeta
|_____.env              # variable de entorno donde estarán tus credenciales                                    [realizar primero]
|_____run.py            # para iniciar el proyecto
|_____config.py         # donde estarán todas las configuraciones, las cuales dependerán del archivo .env       [realizar segundo]
|_____parcial           # carpeta del proyecto
|________controllers    # controlleras
|________database       # 
|________models         # Modelos para migrar a gestor de base de datos Postgres                                [realizar cuarto]
|________views          #
|_______ __init__.py    # creador del proyecto                                                                  [realizar tercero]   
'''


proyecto_flask/
├── app/
│   ├── __init__.py
│   ├── controllers/
│   │   ├── auth.py
│   │   └── user.py
│   ├── models/
│   │   ├── __init__.py
│   │   └── user.py
│   ├── routes.py
│   └── templates/
│       ├── auth/
│       │   ├── login.html
│       │   └── register.html
│       └── base.html
│       └── user/
│           └── profile.html
├── config.py
├── requirements.txt
└── run.py


# instalar
'''
 python -m virtualenv env

 .\env\Scripts\activate.bat

pip install -r requirements.txt

      esto es lo que instale, no es necesario hacerlo: pip install Flask Flask-SQLAlchemy Flask-Migrate psycopg2 python-dotenv
'''

#Migrar base de datos

'''
flask db init

flask db migrate -m "Crea la tabla Usuarios"

flask db upgrade
'''

#para utilizar git y subir sus cambios a github

git init
git status
git add .

-- esto solo se hace la primera vez
git config --global user.email "aquituemail@algo.com"
git config --global user.name "aquitunombredesuario"



git commit -m "comentario de lo que realizaste"


--- subir a repositorio esto se hace una vez 
git remote add origin https://nombredelrepositorio.git

--subir a la rama master, esto se utiliza para subir los cambios al github, revisa la rama a la cual vas a enviar los cambios
git push -u origin master



-=================================================================
---Ramas del proyecto
git branch 


- crear una rama en el repositorio, nombre = nombre de la rama
git branch nombre

- cambiar de la rama nombre
git checkout nombre



--- si queres ver los cambios de otra rama que se haya subido al github, hacer un commit antes si esque has modificado algo
-- traer los cambios sin tener ramas,cuando solo tenes la rama Master   
git pull 

-- traer los cambios de una rama especifica
git pull origin nombrerama

-- unir los cambios de tu rama con tu rama master para subir al github

git checkout master

git merge nombrerama

-- subir a master 
git push -u origin master

-- subir a la rama nombre 
git push -u origin ramanombre




--ver los registros de los cambios realizados
git log

--crear un archivo para ingonar archivos especificos
--pones el nombre ya se de las capetas o archivos

.gitignore


--revertir cambios de los archivos
 git checkout --

-=================================================================